generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id           Int         @id @default(autoincrement())
  username          String      @unique @db.VarChar(100)
  email             String      @unique @db.VarChar(150)
  password_hash     String      @db.VarChar(255)
  first_name        String      @db.VarChar(100)
  last_name         String?     @db.VarChar(100)
  phone_number      String?     @db.VarChar(20)
  type              users_type  @default(buyer)
  profile_image_url String?     @db.VarChar(255)
  email_verified    Boolean     @default(false)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  
  // Relations
  addresses         user_addresses[]
  otp_codes         otp_codes[]
  shopping_cart     shopping_carts?
  orders            orders[]
}

model products {
  product_id  Int     @id @default(autoincrement())
  name        String  @db.VarChar(150)
  description String? @db.Text
  price       Decimal @db.Decimal(10, 2)
  stock       Int     @default(0)
  image_url   String? @db.VarChar(255)
  
  // Relations
  cart_items  cart_items[]
  order_items order_items[]
  @@fulltext([name])
}

model user_addresses {
  address_id     Int      @id @default(autoincrement())
  user_id        Int
  label          String   @db.VarChar(100)
  recipient_name String   @db.VarChar(200)
  phone_number   String   @db.VarChar(20)
  street_address String   @db.VarChar(500)
  province_id    Int?
  city_id        Int?
  district_id    Int?
  postal_code    String   @db.VarChar(10)
  notes          String?  @db.Text
  is_default     Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  
  // Relations
  user           users                     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  province       indonesian_provinces?     @relation(fields: [province_id], references: [province_id])
  city           indonesian_cities?        @relation(fields: [city_id], references: [city_id])
  district       indonesian_districts?     @relation(fields: [district_id], references: [district_id])
  orders         orders[]
}

model shopping_carts {
  cart_id    Int      @id @default(autoincrement())
  user_id    Int      @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  // Relations
  user       users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  items      cart_items[]
}

model cart_items {
  cart_item_id Int      @id @default(autoincrement())
  cart_id      Int
  product_id   Int
  quantity     Int      @default(1)
  added_at     DateTime @default(now())
  
  // Relations
  cart         shopping_carts @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
  product      products       @relation(fields: [product_id], references: [product_id])
  
  @@unique([cart_id, product_id])
}

model orders {
  order_id       Int            @id @default(autoincrement())
  user_id        Int
  address_id     Int
  order_number   String         @unique @db.VarChar(50)
  total_amount   Decimal        @db.Decimal(10, 2)
  status         order_status   @default(pending)
  payment_method String?        @db.VarChar(50)
  payment_status payment_status @default(unpaid)
  notes          String?        @db.Text
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  
  // Relations
  user           users          @relation(fields: [user_id], references: [user_id])
  address        user_addresses @relation(fields: [address_id], references: [address_id])
  items          order_items[]
}

model order_items {
  order_item_id Int     @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity      Int
  price         Decimal @db.Decimal(10, 2)
  subtotal      Decimal @db.Decimal(10, 2)
  
  // Relations
  order         orders   @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  product       products @relation(fields: [product_id], references: [product_id])
}

model otp_codes {
  otp_id     Int         @id @default(autoincrement())
  user_id    Int?
  email      String      @db.VarChar(150)
  code       String      @db.VarChar(6)
  purpose    otp_purpose
  expires_at DateTime
  is_used    Boolean     @default(false)
  created_at DateTime    @default(now())
  
  // Relations
  user       users?      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

// Indonesian Location Tables
model indonesian_provinces {
  province_id        Int      @id @default(autoincrement())
  province_name      String   @unique @db.VarChar(100)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  
  // Relations
  cities             indonesian_cities[]
  user_addresses     user_addresses[]
  shipping_mappings  shipping_provider_mappings[]
}

model indonesian_cities {
  city_id            Int      @id @default(autoincrement())
  province_id        Int
  city_name          String   @db.VarChar(100)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  
  // Relations
  province           indonesian_provinces @relation(fields: [province_id], references: [province_id], onDelete: Cascade)
  districts          indonesian_districts[]
  user_addresses     user_addresses[]
  shipping_mappings  shipping_provider_mappings[]
  
  @@unique([province_id, city_name])
}

model indonesian_districts {
  district_id        Int      @id @default(autoincrement())
  city_id            Int
  district_name      String   @db.VarChar(100)
  zip_code           String?  @db.VarChar(10)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  
  // Relations
  city               indonesian_cities @relation(fields: [city_id], references: [city_id], onDelete: Cascade)
  user_addresses     user_addresses[]
  shipping_mappings  shipping_provider_mappings[]
  
  @@unique([city_id, district_name])
}

// Shipping provider mapping (for API integration)
model shipping_provider_mappings {
  mapping_id         Int      @id @default(autoincrement())
  provider_name      String   @db.VarChar(50) // e.g., "rajaongkir", "shipper", etc
  entity_type        String   @db.VarChar(20) // "province", "city", "district"
  entity_id          Int      // Our internal ID
  provider_id        Int      // Provider's ID
  province_id        Int?
  city_id            Int?
  district_id        Int?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  
  // Relations
  province           indonesian_provinces? @relation(fields: [province_id], references: [province_id], onDelete: Cascade)
  city               indonesian_cities? @relation(fields: [city_id], references: [city_id], onDelete: Cascade)
  district           indonesian_districts? @relation(fields: [district_id], references: [district_id], onDelete: Cascade)
  
  @@unique([provider_name, entity_type, entity_id])
  @@index([provider_name, entity_type, provider_id])
}

enum users_type {
  admin
  buyer
}

enum otp_purpose {
  email_verification
  password_reset
  login_verification
}

enum order_status {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
}

enum payment_status {
  unpaid
  paid
  refunded
  failed
}