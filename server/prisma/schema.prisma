generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id           Int              @id @default(autoincrement())
  username          String           @unique @db.VarChar(100)
  email             String           @unique @db.VarChar(150)
  password_hash     String           @db.VarChar(255)
  first_name        String           @db.VarChar(100)
  last_name         String?          @db.VarChar(100)
  phone_number      String?          @db.VarChar(20)
  type              users_type       @default(buyer)
  profile_image_url String?          @db.VarChar(255)
  email_verified    Boolean          @default(false)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  orders            orders[]
  otp_codes         otp_codes[]
  reviews           reviews[]
  shopping_cart     shopping_carts?
  addresses         user_addresses[]
}

model products {
  product_id  Int           @id @default(autoincrement())
  name        String        @db.VarChar(150)
  description String?       @db.Text
  price       Decimal       @db.Decimal(10, 2)
  stock       Int           @default(0)
  image_url   String?       @db.VarChar(255)
  cart_items  cart_items[]
  order_items order_items[]
  reviews     reviews[]

  @@fulltext([name])
}

model reviews {
  review_id   Int      @id @default(autoincrement())
  user_id     Int
  product_id  Int
  order_id    Int?
  rating      Int
  title       String?  @db.VarChar(200)
  comment     String?  @db.Text
  images      String?  @db.Text
  is_verified Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  order       orders?  @relation(fields: [order_id], references: [order_id])
  product     products @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  user        users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, product_id, order_id])
  @@index([product_id])
  @@index([user_id])
  @@index([order_id], map: "reviews_order_id_fkey")
}

model user_addresses {
  address_id     Int                   @id @default(autoincrement())
  user_id        Int
  label          String                @db.VarChar(100)
  recipient_name String                @db.VarChar(200)
  phone_number   String                @db.VarChar(20)
  street_address String                @db.VarChar(500)
  province_id    Int?
  city_id        Int?
  district_id    Int?
  postal_code    String                @db.VarChar(10)
  notes          String?               @db.Text
  is_default     Boolean               @default(false)
  created_at     DateTime              @default(now())
  updated_at     DateTime              @updatedAt
  orders         orders[]
  city           indonesian_cities?    @relation(fields: [city_id], references: [city_id])
  district       indonesian_districts? @relation(fields: [district_id], references: [district_id])
  province       indonesian_provinces? @relation(fields: [province_id], references: [province_id])
  user           users                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([city_id], map: "user_addresses_city_id_fkey")
  @@index([district_id], map: "user_addresses_district_id_fkey")
  @@index([province_id], map: "user_addresses_province_id_fkey")
  @@index([user_id], map: "user_addresses_user_id_fkey")
}

model shopping_carts {
  cart_id    Int          @id @default(autoincrement())
  user_id    Int          @unique
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  items      cart_items[]
  user       users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model cart_items {
  cart_item_id Int            @id @default(autoincrement())
  cart_id      Int
  product_id   Int
  quantity     Int            @default(1)
  added_at     DateTime       @default(now())
  cart         shopping_carts @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
  product      products       @relation(fields: [product_id], references: [product_id])

  @@unique([cart_id, product_id])
  @@index([product_id], map: "cart_items_product_id_fkey")
}

model orders {
  order_id         Int            @id @default(autoincrement())
  user_id          Int
  address_id       Int
  order_number     String         @unique @db.VarChar(50)
  total_amount     Decimal        @db.Decimal(10, 2)
  shipping_cost    Decimal?       @db.Decimal(10, 2)
  voucher_discount Decimal?       @db.Decimal(10, 2)
  status           order_status   @default(pending)
  payment_method   String?        @db.VarChar(50)
  payment_status   payment_status @default(unpaid)
  payment_proof    String?        @db.VarChar(255)
  notes            String?        @db.Text
  payment_due_at   DateTime?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  items            order_items[]
  address          user_addresses @relation(fields: [address_id], references: [address_id])
  user             users          @relation(fields: [user_id], references: [user_id])
  reviews          reviews[]

  @@index([address_id], map: "orders_address_id_fkey")
  @@index([user_id], map: "orders_user_id_fkey")
  @@map("orders")
}

model order_items {
  order_item_id Int      @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity      Int
  price         Decimal  @db.Decimal(10, 2)
  subtotal      Decimal  @db.Decimal(10, 2)
  order         orders   @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  product       products @relation(fields: [product_id], references: [product_id])

  @@index([order_id], map: "order_items_order_id_fkey")
  @@index([product_id], map: "order_items_product_id_fkey")
}

model otp_codes {
  otp_id     Int         @id @default(autoincrement())
  user_id    Int?
  email      String      @db.VarChar(150)
  code       String      @db.VarChar(6)
  purpose    otp_purpose
  expires_at DateTime
  is_used    Boolean     @default(false)
  created_at DateTime    @default(now())
  user       users?      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id], map: "otp_codes_user_id_fkey")
}

model indonesian_provinces {
  province_id       Int                          @id @default(autoincrement())
  province_name     String                       @unique @db.VarChar(100)
  created_at        DateTime                     @default(now())
  updated_at        DateTime                     @updatedAt
  cities            indonesian_cities[]
  shipping_mappings shipping_provider_mappings[]
  user_addresses    user_addresses[]
}

model indonesian_cities {
  city_id           Int                          @id @default(autoincrement())
  province_id       Int
  city_name         String                       @db.VarChar(100)
  created_at        DateTime                     @default(now())
  updated_at        DateTime                     @updatedAt
  province          indonesian_provinces         @relation(fields: [province_id], references: [province_id], onDelete: Cascade)
  districts         indonesian_districts[]
  shipping_mappings shipping_provider_mappings[]
  user_addresses    user_addresses[]

  @@unique([province_id, city_name])
}

model indonesian_districts {
  district_id       Int                          @id @default(autoincrement())
  city_id           Int
  district_name     String                       @db.VarChar(100)
  zip_code          String?                      @db.VarChar(10)
  created_at        DateTime                     @default(now())
  updated_at        DateTime                     @updatedAt
  city              indonesian_cities            @relation(fields: [city_id], references: [city_id], onDelete: Cascade)
  shipping_mappings shipping_provider_mappings[]
  user_addresses    user_addresses[]

  @@unique([city_id, district_name])
}

model shipping_provider_mappings {
  mapping_id    Int                   @id @default(autoincrement())
  provider_name String                @db.VarChar(50)
  entity_type   String                @db.VarChar(20)
  entity_id     Int
  provider_id   Int
  province_id   Int?
  city_id       Int?
  district_id   Int?
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
  city          indonesian_cities?    @relation(fields: [city_id], references: [city_id], onDelete: Cascade)
  district      indonesian_districts? @relation(fields: [district_id], references: [district_id], onDelete: Cascade)
  province      indonesian_provinces? @relation(fields: [province_id], references: [province_id], onDelete: Cascade)

  @@unique([provider_name, entity_type, entity_id])
  @@index([provider_name, entity_type, provider_id])
  @@index([city_id], map: "shipping_provider_mappings_city_id_fkey")
  @@index([district_id], map: "shipping_provider_mappings_district_id_fkey")
  @@index([province_id], map: "shipping_provider_mappings_province_id_fkey")
}

enum users_type {
  admin
  buyer
}

enum otp_purpose {
  email_verification
  password_reset
  login_verification
}

enum order_status {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
}

enum payment_status {
  unpaid
  paid
  refunded
  failed
}
